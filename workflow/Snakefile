"""
Main Snakefile
Contains final rule, dependency graph rule, and connects Snakefiles from rules/
"""

from pathlib import Path

configfile: 'configs/config.yml'
output_root = Path(config['output_root']).resolve()
config['assembly_ucsc'] = 'hg19' if config['genome_assembly'] == 'GRCh37' else 'hg38'
chr_subsets = config['chr_subsets'].keys()
run_locations = 'local' if config['local'] else 'gcp'

MAPS_AGGREGATIONS = [
    # Wildcard combinations of form: {x-axis}-{color}-{facet}
    # Each of the entries must be a valid field of the singleton count table
    # At least one entry must be given, e.g. 'hexamer-overall' will plot 'hexamer' in the
    # x-axis and colour by 'overall', but does not facet the plot
    'hexamer-conserved-overall',
    'hexamer-overall-conserved',
    'conserved',
    'conserved-overall',
    'hexamer-conserved',
    'overall',
    'worst_csq'
]

include: 'rules/download_data.smk'
include: 'rules/extract_UTR_features.smk'
include: 'rules/evaluation.smk'

rule all:
    input:
        expand(
            rules.MAPS.output,
            aggregation=MAPS_AGGREGATIONS,
            run_location=run_locations,
            chr_subset=chr_subsets
        )

rule dependency:
    output:
        dag=multiext(str(output_root / 'dependency_dag'),'.svg','.png'),
        rulegraph=multiext(str(output_root / 'dependency_rules'),'.svg','.png')
    shell:
        """
        snakemake --dag | dot -Tsvg -Grankdir=TB > {output.dag[0]}
        snakemake --dag | dot -Tpng -Grankdir=TB > {output.dag[1]}
        snakemake --rulegraph | dot -Tsvg -Grankdir=TB > {output.rulegraph[0]}
        snakemake --rulegraph | dot -Tpng -Grankdir=TB > {output.rulegraph[1]}
        """
